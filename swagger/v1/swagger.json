{
  "swagger": "2.0",
  "info": {
    "title": "API V1",
    "version": "v1"
  },
  "basePath": "/api/v1",
  "paths": {
    "/devices": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "all devices",
        "tags": [
          "Devices"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "return all devices"
          },
          "401": {
            "description": "unauthorized"
          }
        }
      }
    },
    "/devices/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Device ID",
          "required": true
        }
      ],
      "get": {
        "summary": "Show device's infomation",
        "tags": [
          "Devices"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "401": {
            "description": "unauthenticated user",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "device not found",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Device with 'id'=0"
                }
              }
            }
          },
          "200": {
            "description": "device has been found",
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "name": "laptop 0",
                  "serial_code": "546031702833217",
                  "device_type": "laptop",
                  "os_version": "Tyrell Jenkins",
                  "project": {
                    "id": 3,
                    "name": "Stanford Carroll",
                    "description": null,
                    "starts_on": "2018-09-15",
                    "logo": "/uploads/avatar.png",
                    "product_owner": {
                      "id": 2,
                      "organization_id": 1,
                      "name": "Gussie D'Amore Sr.",
                      "employee_code": "B1210001",
                      "email": "gussie.d'amore.sr.@framgia.com",
                      "birthday": null,
                      "phone": "0987654321",
                      "avatar": "/uploads/avatar.png"
                    }
                  },
                  "pic": {
                    "id": 251,
                    "organization_id": 39,
                    "name": "Chasity Bauch",
                    "employee_code": "B1210250",
                    "email": "chasity.bauch@framgia.com",
                    "birthday": null,
                    "phone": "0987654321",
                    "avatar": "/uploads/avatar.png"
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/projects/{project_id}/sprints/{sprint_id}/efforts": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "sprint_id",
          "in": "path",
          "type": "integer",
          "description": "Sprint ID",
          "required": true
        }
      ],
      "get": {
        "summary": "get effort of employee in a sprint",
        "tags": [
          "Efforts"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "cannot find sprint id",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Sprint with 'id'=0"
                }
              }
            }
          },
          "401": {
            "description": "members not in project cannot view effort",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "Admin can view effort",
            "examples": {
              "application/json": [
                {
                  "id": 10284,
                  "effort": 75,
                  "name": "Lexie Yost V",
                  "skill": {
                    "id": 1,
                    "name": "Ruby",
                    "logo": "#",
                    "level": {
                      "id": 1,
                      "name": "Junior",
                      "rank": 1,
                      "logo": "#"
                    }
                  }
                },
                {
                  "id": 10521,
                  "effort": 50,
                  "name": "Administator",
                  "skill": {
                    "id": 1,
                    "name": "Ruby",
                    "logo": "#",
                    "level": {
                      "id": 3,
                      "name": "Senior",
                      "rank": 3,
                      "logo": "#"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "create an effort",
        "tags": [
          "Efforts"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "efforts": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "employee_id": {
                        "type": "integer"
                      },
                      "level_id": {
                        "type": "integer"
                      },
                      "effort": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "required": [
                "efforts"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "skip creating effort which has invalid emp_id/level_id",
            "examples": {
              "application/json": [

              ]
            }
          },
          "401": {
            "description": "manager in other division cannot create effort",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              },
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "400": {
            "description": "one of efforts missing params",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "efforts[0][employee_id] is missing"
                }
              }
            }
          },
          "422": {
            "description": "duped effort",
            "examples": {
              "application/json": {
                "error": {
                  "code": 422,
                  "message": "Validation failed: Employee has already been found in sprint."
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/sprints/{sprint_id}/efforts/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "sprint_id",
          "in": "path",
          "type": "integer",
          "description": "Sprint ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Effort ID",
          "required": true
        }
      ],
      "patch": {
        "summary": "update effort",
        "tags": [
          "Efforts"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "effort": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PO can update effort",
            "examples": {
              "application/json": {
                "id": 1,
                "employee_id": 1,
                "effort": 100,
                "level_id": 1,
                "employee_level_id": 1
              }
            }
          },
          "400": {
            "description": "missing params",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "effort is missing"
                }
              }
            }
          },
          "401": {
            "description": "manager in other division cannot update effort",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete effort",
        "tags": [
          "Efforts"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "manager of PO can delete effort",
            "examples": {
              "application/json": {
                "message": "Delete successfully"
              }
            }
          },
          "401": {
            "description": "manager of other division cannot delete an effort",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/efforts": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "Detail effort of a employee",
        "tags": [
          "Efforts"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employee_id",
            "in": "query",
            "type": "integer",
            "description": "Id of employee"
          },
          {
            "name": "start_time",
            "in": "query",
            "type": "string",
            "description": "Start time to filter"
          },
          {
            "name": "end_time",
            "in": "query",
            "type": "string",
            "description": "End time to filter"
          }
        ],
        "responses": {
          "200": {
            "description": "return detail effort with correct params",
            "examples": {
              "application/json": [
                {
                  "employee_id": 1,
                  "start_time": "1/1/2018",
                  "end_time": "2/1/2018",
                  "effort": 100,
                  "sprint_id": 1,
                  "employee_level_id": 1
                }
              ]
            }
          },
          "400": {
            "description": "empty params",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "end_time is empty"
                }
              }
            }
          },
          "404": {
            "description": "invalid employee id",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Employee with 'id'=0"
                }
              }
            }
          },
          "401": {
            "description": "user can't view effort of employee in other project",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/employees": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "Information of all employees",
        "tags": [
          "Employees"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "type": "string",
            "description": "Filter employee with name or employee code"
          },
          {
            "name": "organization_id",
            "in": "query",
            "type": "integer",
            "description": "Filter employees in organization"
          },
          {
            "name": "skill_id",
            "in": "query",
            "type": "integer",
            "description": "Filter employee with skill"
          },
          {
            "name": "organization_not_in",
            "in": "query",
            "type": "integer",
            "description": "Filter employees not in organization"
          },
          {
            "name": "level_ids[]",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "integer"
            },
            "description": "Filter employees with multiple levels"
          },
          {
            "name": "ids[]",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "integer"
            },
            "description": "Filter employees with ids"
          },
          {
            "name": "project_id",
            "in": "query",
            "type": "integer",
            "description": "Filter employees with project id"
          },
          {
            "name": "start_time",
            "in": "query",
            "type": "date",
            "required": false
          },
          {
            "name": "total_effort_lt",
            "in": "query",
            "type": "integer",
            "required": false
          },
          {
            "name": "end_time",
            "in": "query",
            "type": "date",
            "required": false
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "empty start_time",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "input_time is empty"
                }
              }
            }
          },
          "200": {
            "description": "return employees without any params",
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "organization_id": 1,
                  "name": "Employee",
                  "employee_code": "B120000",
                  "email": "employee@framgia.com",
                  "birthday": "1/1/2018",
                  "phone": "0123456789",
                  "avatar": "#"
                },
                {
                  "id": 2,
                  "organization_id": 1,
                  "name": "Eldora Fay",
                  "employee_code": "B1210001",
                  "email": "eldora.fay@framgia.com",
                  "birthday": "1/1/2018",
                  "phone": "0987654321",
                  "avatar": "#"
                }
              ]
            }
          },
          "401": {
            "description": "unauthorized",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "return error when pass organization not existed to params organization_not_in ",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Organization with 'id'=0"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create employee",
        "tags": [
          "Employees"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "employee_code": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "organization_id": {
                  "type": "integer"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "member cannot create employee",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "201": {
            "description": "manager create successfully",
            "examples": {
              "application/json": {
                "id": 1,
                "organization_id": 1,
                "name": "Employee",
                "employee_code": "B120000",
                "email": "employee@framgia.com",
                "birthday": "1/1/2018",
                "phone": "0123456789",
                "avatar": "#"
              }
            }
          },
          "400": {
            "description": "missing params email",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "Email is missing"
                }
              }
            }
          },
          "422": {
            "description": "email has been taken",
            "examples": {
              "application/json": {
                "error": {
                  "code": 422,
                  "message": "Validation failed: Email has already been taken"
                }
              }
            }
          }
        }
      }
    },
    "/employees/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "Get information of specific employee",
        "tags": [
          "Employees"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Employees ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "return one employee",
            "examples": {
              "application/json": {
                "id": 1,
                "organization_id": 1,
                "name": "Employee",
                "employee_code": "B120000",
                "email": "employee@framgia.com",
                "birthday": "1/1/2018",
                "phone": "0123456789",
                "avatar": "#"
              }
            }
          },
          "404": {
            "description": "invalid id",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Employee with 'id'=0"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete employee",
        "tags": [
          "Employees"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Employees ID",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "description": "member cannot delete",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "admin can delete",
            "examples": {
              "application/json": {
                "message": "Delete successfully"
              }
            }
          }
        }
      }
    },
    "/employees/{id}/efforts": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Id of employee",
          "required": true
        },
        {
          "name": "start_time",
          "in": "query",
          "type": "Date",
          "description": "Start time to filter"
        },
        {
          "name": "end_time",
          "in": "query",
          "type": "Date",
          "description": "End time to filter"
        }
      ],
      "get": {
        "summary": "Detail efforts by employee",
        "tags": [
          "Employees"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "invalid employee's id",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Employee with 'id'=0"
                }
              }
            }
          },
          "401": {
            "description": "user can't view detail effort of employee in other project",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "400": {
            "description": "params start_time (or end_time) is invalid",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "start_time is invalid"
                }
              }
            }
          },
          "200": {
            "description": "return detail effort by employee",
            "examples": {
              "application/json": [
                {
                  "project_name": "Emres",
                  "effort_value": 50,
                  "skill": "Ruby"
                },
                {
                  "project_name": "AABBCC",
                  "effort_value": 70,
                  "skill": "PHP"
                }
              ]
            }
          }
        }
      }
    },
    "/employees/{id}/skills": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "get skills of employee",
        "tags": [
          "Employees"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Employees ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "return all skill of employee",
            "examples": {
              "application/json": {
                "id": 2,
                "name": "Zelma Dibbert",
                "skills": [
                  {
                    "id": 2,
                    "name": "Java",
                    "levels": [
                      {
                        "id": 6,
                        "name": "Senior",
                        "rank": 3,
                        "skill_id": 2,
                        "logo": "/uploads/avatar.png"
                      }
                    ]
                  },
                  {
                    "id": 1,
                    "name": "Ruby",
                    "levels": [
                      {
                        "id": 2,
                        "name": "Middle",
                        "rank": 2,
                        "skill_id": 1,
                        "logo": "/uploads/avatar.png"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "invalid id",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Employee with 'id'=0"
                }
              }
            }
          }
        }
      }
    },
    "/skills/{skill_id}/levels": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "skill_id",
          "in": "path",
          "type": "integer",
          "description": "Skill ID",
          "required": true
        }
      ],
      "post": {
        "summary": "Create a new level",
        "tags": [
          "Levels"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "rank": {
                  "type": "integer"
                },
                "logo": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "rank"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "empty parameter 'name'",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "name is empty"
                }
              }
            }
          },
          "401": {
            "description": "employee cannot create level",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "skill not found",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Skill with 'id'=0"
                }
              }
            }
          },
          "201": {
            "description": "level created",
            "examples": {
              "application/json": {
                "id": 1,
                "name": "Master",
                "rank": 100,
                "logo": "#",
                "skill_id": 1234
              }
            }
          }
        }
      }
    },
    "/skills/{skill_id}/levels/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "skill_id",
          "in": "path",
          "type": "integer",
          "description": "Skill ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Level ID",
          "required": true
        }
      ],
      "patch": {
        "summary": "update a level",
        "tags": [
          "Levels"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "rank": {
                  "type": "integer"
                },
                "logo": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "rank"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "empty parameter 'name'",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "name is empty"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "level updated",
            "examples": {
              "application/json": {
                "id": 1,
                "name": "Master",
                "rank": 100,
                "logo": "#",
                "skill_id": 1234
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete level",
        "tags": [
          "Levels"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "401": {
            "description": "employee cannot delete level",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "deleted a level",
            "examples": {
              "application/json": {
                "message": "Delete successfully"
              }
            }
          }
        }
      }
    },
    "/organizations": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "organization tree",
        "tags": [
          "Organizations"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "return application tree",
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "name": "Division 1",
                  "parent_id": null,
                  "manager_id": 2,
                  "level": "division",
                  "children": [
                    {
                      "id": 2,
                      "name": "Section 1",
                      "parent_id": 1,
                      "manager_id": 3,
                      "level": "section",
                      "children": [
                        {
                          "id": 3,
                          "name": "Group 1",
                          "parent_id": 2,
                          "manager_id": 4,
                          "level": "clan",
                          "children": [
                            {
                              "id": 4,
                              "name": "Team 1",
                              "parent_id": 3,
                              "manager_id": 5,
                              "level": "team",
                              "children": [

                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "id": 10,
                  "name": "Division 2",
                  "parent_id": null,
                  "manager_id": 12,
                  "level": "division",
                  "children": [

                  ]
                }
              ]
            }
          },
          "401": {
            "description": "unauthorized",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an organization",
        "tags": [
          "Organizations"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "organization",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "manager_id": {
                  "type": "integer"
                },
                "level": {
                  "type": "integer"
                },
                "parent_id": {
                  "type": "integer"
                }
              },
              "required": [
                "name",
                "manager_id",
                "level"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created an organization",
            "examples": {
              "application/json": {
                "id": 3,
                "name": "Group 1",
                "parent_id": 2,
                "manager_id": 4,
                "level": "clan",
                "children": [

                ]
              }
            }
          },
          "400": {
            "description": "validation failed",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "name is missing"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "Information of an organization",
        "tags": [
          "Organizations"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Organization ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns the organization information",
            "examples": {
              "application/json": {
                "id": 1,
                "parent_id": null,
                "manager_id": 2,
                "level": "division",
                "name": "Division 1",
                "children": [
                  {
                    "id": 2,
                    "parent_id": 1,
                    "manager_id": 3,
                    "level": "section",
                    "name": "Section 1",
                    "children": [
                      {
                        "id": 3,
                        "parent_id": 2,
                        "manager_id": 4,
                        "level": "clan",
                        "name": "Clan 1",
                        "children": [
                          {
                            "id": 4,
                            "parent_id": 3,
                            "manager_id": 5,
                            "level": "team",
                            "name": "Team 1",
                            "children": [

                            ]
                          },
                          {
                            "id": 5,
                            "parent_id": 3,
                            "manager_id": 6,
                            "level": "team",
                            "name": "Team 2",
                            "children": [

                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "returns invalid id error",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Organization with 'id'=0"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an organization",
        "tags": [
          "Organizations"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "organization",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Organization name"
                },
                "manager_id": {
                  "type": "integer",
                  "description": "Organization manager"
                },
                "level": {
                  "type": "integer",
                  "description": "Organization level"
                },
                "parent_id": {
                  "type": "integer",
                  "description": "Organization parent"
                }
              },
              "required": [
                "name",
                "manager_id",
                "level"
              ]
            }
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Organization ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "updated an organization",
            "examples": {
              "application/json": {
                "id": 3,
                "name": "Group 1",
                "parent_id": 2,
                "manager_id": 4,
                "level": "clan",
                "children": [

                ]
              }
            }
          },
          "400": {
            "description": "validation failed",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "name is missing"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "not found organization",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Organization with 'id'=0"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes an organization",
        "tags": [
          "Organizations"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Organization ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted an organization",
            "examples": {
              "application/json": {
                "message": "Delete successfully"
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "not found organization",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Organization with 'id'=0"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{id}/employees": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "patch": {
        "summary": "Update an organization for employees",
        "tags": [
          "Organizations"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "employees",
            "in": "body",
            "description": "Employees's ID",
            "schema": {
              "type": "object",
              "properties": {
                "employees": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Organization ID",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "description": "manager of other organization cannot add employee",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "manager of organization can add employee",
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "organization_id": 1,
                  "name": "Employee",
                  "employee_code": "B120000",
                  "email": "employee@framgia.com",
                  "birthday": "1/1/2018",
                  "phone": "0123456789",
                  "avatar": "#"
                }
              ]
            }
          }
        }
      }
    },
    "/organizations/{id}/employees/{employee_id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Organization ID",
          "required": true
        },
        {
          "name": "employee_id",
          "in": "path",
          "type": "integer",
          "description": "Employee ID",
          "required": true
        }
      ],
      "delete": {
        "summary": "Deletes an organization employee",
        "tags": [
          "Organizations"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "manager of organization can delete employee",
            "examples": {
              "application/json": {
                "message": "Delete successfully"
              }
            }
          },
          "404": {
            "description": "cannot delete employee not in organization",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Employee with 'id'=0"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/phases": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        }
      ],
      "get": {
        "summary": "All phases in project",
        "tags": [
          "Phases"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "project not found",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Project with 'id'=0"
                }
              }
            }
          },
          "401": {
            "description": "employee not in project cannot view all phases",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "return all phases in project",
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "name": "Phase 1",
                  "starts_on": "2018-08-1",
                  "ends_on": "2018-08-31"
                },
                {
                  "id": 2,
                  "name": "Phase 2",
                  "starts_on": "2018-09-1",
                  "ends_on": "2018-09-30"
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create new phase",
        "tags": [
          "Phases"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "starts_on": {
                  "type": "date"
                },
                "ends_on": {
                  "type": "date"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "manager in other division cannot create phase",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "201": {
            "description": "PO can create phase",
            "examples": {
              "application/json": {
                "id": 1,
                "name": "phase 1",
                "starts_on": "2018-08-1",
                "ends_on": "2018-08-31"
              }
            }
          },
          "400": {
            "description": "empty params ends_on",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "ends_on is empty"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/phases/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Phase ID",
          "required": true
        }
      ],
      "get": {
        "summary": "specific phase in project",
        "tags": [
          "Phases"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "phase not found",
            "examples": {
              "application/json": {
                "error_code": 603,
                "errors": "Couldn't find Phase with 'id'=0"
              }
            }
          },
          "200": {
            "description": "return specific phase in project",
            "examples": {
              "application/json": {
                "id": 1,
                "name": "Phase 1",
                "starts_on": "2018-08-1",
                "ends_on": "2018-08-31"
              }
            }
          },
          "401": {
            "description": "employee isn't in project cannot view phase",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "update phase",
        "tags": [
          "Phases"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "start_date": {
                  "type": "date"
                },
                "end_date": {
                  "type": "date"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "manager in other division cannot update phase",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "PO can update phase",
            "examples": {
              "application/json": {
                "id": 1,
                "name": "phase 4",
                "starts_on": "2018-08-1",
                "ends_on": "2018-08-31"
              }
            }
          },
          "400": {
            "description": "empty params ends_on",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "ends_on is empty"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete phase",
        "tags": [
          "Phases"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "401": {
            "description": "manager in other division cannot delete phase",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "deleted a phase",
            "examples": {
              "application/json": {
                "message": "Delete successfully"
              }
            }
          }
        }
      }
    },
    "/profile": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "Get profile information",
        "tags": [
          "Profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return profile of current user",
            "examples": {
              "application/json": {
                "id": 1,
                "organization_id": 1,
                "avatar": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                "name": "occaecat",
                "employee_code": "D412437",
                "email": "v8uGTMi@fAXlhkXWMQNFdsEQ.qe",
                "phone": "+839948435",
                "birthday": "2621-07-19"
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update current user profile",
        "tags": [
          "Profiles"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profile",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "phone": {
                  "type": "string"
                },
                "avatar": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated profile",
            "examples": {
              "application/json": {
                "id": -25217952,
                "organization_id": -18753403,
                "name": "fugiat consectetur nulla",
                "employee_code": "V612453",
                "email": "Eff4Io5b-9@ILYSqeFBanInhDEINmNKeyzW.xy",
                "birthday": "2436-05-01",
                "phone": "43722327",
                "avatar": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png"
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "400": {
            "description": "phone is wrong format",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "phone is invalid"
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "All projects",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "type": "string",
            "description": "Project Name"
          },
          {
            "name": "organization_id",
            "in": "query",
            "type": "integer",
            "description": "Organization ID"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "401": {
            "description": "unauthorized",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "return projects match with params name and organization_id + child",
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "name": "Project 1",
                  "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                  "starts_on": "2018-08-08",
                  "description": "Description of project 1",
                  "product_owner": {
                    "id": 1,
                    "organization_id": 1,
                    "name": "Employee",
                    "employee_code": "B120000",
                    "email": "employee@framgia.com",
                    "birthday": "1/1/2018",
                    "phone": "0123456789",
                    "avatar": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png"
                  }
                }
              ]
            }
          },
          "404": {
            "description": "return error when any project match organization_id + child",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Organization with 'id'=0"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a project",
        "tags": [
          "Projects"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Project name"
                },
                "product_owner_id": {
                  "type": "integer",
                  "description": "Product owner"
                },
                "starts_on": {
                  "type": "date",
                  "description": "Project start time"
                }
              },
              "required": [
                "name",
                "product_owner_id"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Manager can create a project",
            "examples": {
              "application/json": {
                "id": 11,
                "name": "Project 1",
                "description": "Description of project 1",
                "starts_on": "2018-07-12",
                "logo": "/uploads/avatar.png",
                "product_owner": {
                  "id": 1,
                  "organization_id": 1,
                  "name": "Administator",
                  "employee_code": "B1210000",
                  "email": "admin@framgia.com",
                  "birthday": "1/1/2018",
                  "phone": "0987654321",
                  "avatar": "/uploads/avatar.png"
                }
              }
            }
          },
          "401": {
            "description": "Employee cannot create",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "400": {
            "description": "missing param name",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "name is missing"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "Get information of specific project",
        "tags": [
          "Projects"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Employee can see project that employee belongs to",
            "examples": {
              "application/json": {
                "name": "Project 1",
                "logo": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMaYHrIPq6IFEZc1DyjvRznKuxCvCelfreMChjDJeRusEm0TtgHl",
                "description": "Description",
                "starts_on": "2018-08-10",
                "product_owner": {
                  "id": 1,
                  "organization_id": 1,
                  "name": "Employee",
                  "employee_code": "B120000",
                  "email": "employee@framgia.com",
                  "birthday": "1/1/2018",
                  "phone": "0123456789",
                  "avatar": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMaYHrIPq6IFEZc1DyjvRznKuxCvCelfreMChjDJeRusEm0TtgHl"
                },
                "current_sprint": {
                  "id": 1,
                  "name": "sprint 1"
                },
                "phases": [
                  {
                    "id": 1,
                    "name": "phase 1",
                    "requirements": [
                      {
                        "id": 1,
                        "quantity": 7,
                        "phase_id": 1,
                        "skill_level": "Middle",
                        "skill_name": "Ruby"
                      },
                      {
                        "id": 2,
                        "quantity": 2,
                        "phase_id": 1,
                        "skill_level": "Senior",
                        "skill_name": "Java"
                      }
                    ],
                    "sprints": [
                      {
                        "id": 1,
                        "name": "sprint 1",
                        "starts_on": "2018-08-10",
                        "ends_on": "2018-08-20",
                        "members": [
                          {
                            "id": 339,
                            "effort": 80,
                            "name": "Eloy Grady",
                            "skill": {
                              "id": 1,
                              "name": "Ruby",
                              "logo": "",
                              "level": {
                                "id": 1,
                                "name": "Junior",
                                "rank": 1,
                                "logo": "#"
                              }
                            }
                          },
                          {
                            "id": 466,
                            "effort": 25,
                            "name": "Graham Streich III",
                            "skill": {
                              "id": 1,
                              "name": "Ruby",
                              "logo": "",
                              "level": {
                                "id": 1,
                                "name": "Junior",
                                "rank": 1,
                                "logo": "#"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Employee cannot see project that employee does not belongs to",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "project not found",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Project with 'id'=0"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an project",
        "tags": [
          "Projects"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Project name"
                },
                "description": {
                  "type": "string",
                  "description": "Project description"
                },
                "product_owner_id": {
                  "type": "integer",
                  "description": "Product owner"
                },
                "starts_on": {
                  "type": "date",
                  "description": "Project start time"
                }
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "admin can update a project",
            "examples": {
              "application/json": {
                "id": 11,
                "name": "Project 1",
                "description": "Description of project 1",
                "starts_on": "2018-07-12",
                "logo": "/uploads/avatar.png",
                "product_owner": {
                  "id": 1,
                  "organization_id": 1,
                  "name": "Administator",
                  "employee_code": "B1210000",
                  "email": "admin@framgia.com",
                  "birthday": "1/1/2018",
                  "phone": "0987654321",
                  "avatar": "/uploads/avatar.png"
                }
              },
              "application/json": {
                "id": 1,
                "name": "Project 1",
                "description": "Project description",
                "logo": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMaYHrIPq6IFEZc1DyjvRznKuxCvCelfreMChjDJeRusEm0TtgHl",
                "starts_on": "2018-08-10",
                "product_owner": {
                  "id": 1,
                  "organization_id": 1,
                  "name": "Employee",
                  "employee_code": "B120000",
                  "email": "employee@framgia.com",
                  "birthday": "1/1/2018",
                  "phone": "0123456789",
                  "avatar": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMaYHrIPq6IFEZc1DyjvRznKuxCvCelfreMChjDJeRusEm0TtgHl"
                }
              }
            }
          },
          "401": {
            "description": "Employee cannot update",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project",
        "tags": [
          "Projects"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Project ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "manager delete successfully",
            "examples": {
              "application/json": {
                "message": "Delete successfully"
              }
            }
          },
          "401": {
            "description": "employee cannot delete project",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/phases/{phase_id}/requirements": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "phase_id",
          "in": "path",
          "type": "integer",
          "description": "Phase ID",
          "required": true
        }
      ],
      "get": {
        "summary": "All requirement in phases of project",
        "tags": [
          "Requirements"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "Phase not found",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Phase with 'id'=0"
                }
              }
            }
          },
          "200": {
            "description": "return all requirement in phase",
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "skill_name": "Ruby",
                  "phase_id": 3,
                  "skill_level": "Junior",
                  "quantity": 10
                },
                {
                  "id": 2,
                  "skill_name": "Ruby",
                  "skill_level": "Senior",
                  "phase_id": 2,
                  "quantity": 5
                }
              ]
            }
          },
          "401": {
            "description": "employee isn't in project cannot get all requirements",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new requirement",
        "tags": [
          "Requirements"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "level_id": {
                  "type": "integer",
                  "description": "Level ID"
                },
                "phase_id": {
                  "type": "integer",
                  "description": "Phase ID"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quanity"
                }
              },
              "required": [
                "level_id",
                "phase_id",
                "quantity"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "manager in other division cannot create requirement",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "201": {
            "description": "PO can create requirement",
            "examples": {
              "application/json": {
                "level_id": 1,
                "phase_id": 1,
                "skill_name": "Ruby",
                "skill_level": "Junior",
                "quantity": 5
              }
            }
          },
          "400": {
            "description": "empty params",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "level_id is empty"
                }
              }
            }
          }
        }
      }
    },
    "/phases/{phase_id}/requirements/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "phase_id",
          "in": "path",
          "type": "integer",
          "description": "Phase ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Requirement ID",
          "required": true
        }
      ],
      "get": {
        "summary": "specific requirement in phase",
        "tags": [
          "Requirements"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "requirement not found",
            "examples": {
              "application/json": {
                "error_code": 404,
                "errors": "Couldn't find Requirement with 'id'=0"
              }
            }
          },
          "200": {
            "description": "return specific requirement in phase",
            "examples": {
              "application/json": {
                "level_id": 1,
                "phase_id": 1,
                "skill_name": "Ruby",
                "skill_level": "Junior",
                "quantity": 5
              }
            }
          },
          "401": {
            "description": "employee isn't in project cannot get requirement",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "update requirement",
        "tags": [
          "Requirements"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "level_id": {
                  "type": "integer",
                  "description": "Level ID"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quanity"
                }
              },
              "required": [
                "phase_id",
                "level_id",
                "quantity"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "manager in other division cannot update requirement",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "PO can update phase",
            "examples": {
              "application/json": {
                "level_id": 1,
                "phase_id": 1,
                "skill_name": "Ruby",
                "skill_level": "Junior",
                "quantity": 5
              }
            }
          },
          "400": {
            "description": "missing params",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "level_id is missing"
                }
              }
            }
          },
          "422": {
            "description": "empty params",
            "examples": {
              "application/json": {
                "error": {
                  "code": 422,
                  "message": "Validation failed: Level must exist"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete requirement",
        "tags": [
          "Requirements"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "401": {
            "description": "manager in other division cannot delete requirement",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "PO can deleted a requirement",
            "examples": {
              "application/json": {
                "message": "Delete successfully"
              }
            }
          }
        }
      }
    },
    "/session": {
      "post": {
        "summary": "Login API",
        "tags": [
          "Session"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "Email"
                },
                "password": {
                  "type": "string",
                  "description": "Password"
                },
                "remember": {
                  "type": "boolean",
                  "description": "Remember me"
                }
              },
              "required": [
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login success with valid email/password",
            "examples": {
              "application/json": {
                "token": "Your token",
                "expired_at": "2018-08-31T14:33:00.048+07:00"
              }
            }
          },
          "400": {
            "description": "Login with invalid password",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "wrong email password"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "logout api",
        "tags": [
          "Session"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Token authorization user"
          }
        ],
        "responses": {
          "200": {
            "description": "with valid token",
            "examples": {
              "application/json": {
                "Authorization": "Bearer your_token"
              }
            }
          },
          "401": {
            "description": "with invalid token"
          }
        }
      },
      "patch": {
        "summary": "Change Password API",
        "tags": [
          "Session"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string",
            "description": "Token authorization user"
          },
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "current_password": {
                  "type": "string",
                  "description": "Current password"
                },
                "new_password": {
                  "type": "string",
                  "description": "New password"
                }
              },
              "required": [
                "current_password",
                "new_password"
              ]
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Wrong current password",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "wrong current password"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "Change Password success with valid new password",
            "examples": {
              "application/json": {
                "message": "Success"
              }
            }
          }
        }
      }
    },
    "/skills": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "get": {
        "summary": "Get all skills",
        "tags": [
          "Skills"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "401": {
            "description": "unauthorized user",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "return all skills",
            "examples": {
              "application/json": [
                {
                  "id": 28523152,
                  "name": "eu i",
                  "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                  "levels": [
                    {
                      "id": 67354355,
                      "name": "aliquip ",
                      "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                      "rank": 45196393,
                      "skill_id": 3593242
                    }
                  ]
                },
                {
                  "id": 87853089,
                  "name": "Ut ",
                  "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                  "levels": [
                    {
                      "id": 67725294,
                      "name": "ali",
                      "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                      "rank": -1861221,
                      "skill_id": -76872276
                    },
                    {
                      "id": 61694819,
                      "name": "off",
                      "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                      "rank": -29289828,
                      "skill_id": 24437180
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "post": {
        "summary": "Create skill",
        "tags": [
          "Skills"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Skill's name"
                },
                "logo": {
                  "type": "string",
                  "description": "Logo path"
                },
                "levels": [
                  {
                    "name": {
                      "type": "string",
                      "description": "Level's name"
                    },
                    "rank": {
                      "type": "integer",
                      "description": "Rank number"
                    },
                    "logo": {
                      "type": "string",
                      "description": "Logo path"
                    }
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created successfully",
            "examples": {
              "application/json": {
                "id": 42814442,
                "name": "volup",
                "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                "levels": [
                  {
                    "id": 15785576,
                    "name": "al",
                    "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                    "rank": 92878607,
                    "skill_id": 60261939
                  },
                  {
                    "id": 4155938,
                    "name": "volupta",
                    "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                    "rank": -27562324,
                    "skill_id": 63219058
                  }
                ]
              }
            }
          },
          "400": {
            "description": "empty value for params[:name]",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "name is empty"
                }
              }
            }
          }
        }
      }
    },
    "/skills/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        }
      ],
      "patch": {
        "summary": "Update skill",
        "tags": [
          "Skills"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Skill ID",
            "required": true
          },
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Skill's name"
                },
                "logo": {
                  "type": "string",
                  "description": "Logo path"
                },
                "levels": [
                  {
                    "id": {
                      "type": "integer",
                      "description": "Level ID"
                    },
                    "name": {
                      "type": "string",
                      "description": "Level's name"
                    },
                    "rank": {
                      "type": "integer",
                      "description": "Rank number"
                    },
                    "logo": {
                      "type": "string",
                      "description": "Logo path"
                    }
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "invalid id",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Skill with 'id'=0"
                }
              }
            }
          },
          "400": {
            "description": "missing params[:levels][:name]",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "levels[0][name] is missing"
                }
              }
            }
          },
          "422": {
            "description": "empty value for params[:name]",
            "examples": {
              "application/json": {
                "error": {
                  "code": 422,
                  "message": "Validation failed: Name can't be blank"
                }
              }
            }
          },
          "200": {
            "description": "update successfully",
            "examples": {
              "application/json": {
                "id": 42814442,
                "name": "volup",
                "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                "levels": [
                  {
                    "id": 15785576,
                    "name": "al",
                    "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                    "rank": 92878607,
                    "skill_id": 60261939
                  },
                  {
                    "id": 4155938,
                    "name": "volupta",
                    "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                    "rank": -27562324,
                    "skill_id": 63219058
                  }
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete skill",
        "tags": [
          "Skills"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Skill ID",
            "required": true
          }
        ],
        "responses": {
          "422": {
            "description": "unable to delete when having association",
            "examples": {
              "application/json": {
                "error": {
                  "code": 422,
                  "message": "Failed to destroy the record"
                }
              }
            }
          },
          "200": {
            "description": "delete successfully",
            "examples": {
              "application/json": {
                "message": "Delete successfully"
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/phases/{phase_id}/sprints": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "phase_id",
          "in": "path",
          "type": "integer",
          "description": "Phase ID",
          "required": true
        }
      ],
      "get": {
        "summary": "All sprint in phase",
        "tags": [
          "Sprints"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "phase not found",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Phase with 'id'=0"
                }
              }
            }
          },
          "200": {
            "description": "return all sprint",
            "examples": {
              "application/json": [
                {
                  "id": 1,
                  "name": "sprint 1",
                  "starts_on": "2018-07-19",
                  "ends_on": "2018-07-20"
                },
                {
                  "id": 2,
                  "name": "sprint 2",
                  "starts_on": "2018-07-19",
                  "ends_on": "2018-07-20"
                }
              ]
            }
          },
          "401": {
            "description": "employee isn't in project cannot view all sprints",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new sprint",
        "tags": [
          "Sprints"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Sprint's name"
                },
                "starts_on": {
                  "type": "date",
                  "description": "Starts on of sprint"
                },
                "ends_on": {
                  "type": "date",
                  "description": "Ends on of sprint"
                },
                "efforts": [
                  {
                    "effort": {
                      "type": "integer",
                      "description": "Effort number"
                    },
                    "employee_id": {
                      "type": "integer",
                      "description": "Employee ID"
                    },
                    "level_id": {
                      "type": "integer",
                      "description": "Level ID"
                    }
                  }
                ]
              },
              "required": [
                "name",
                "starts_on",
                "ends_on"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "manager of PO can create sprint",
            "examples": {
              "application/json": {
                "id": 1,
                "name": "Sprint 1",
                "starts_on": "2018-07-25",
                "ends_on": "2018-08-04",
                "members": [
                  {
                    "effort": 100,
                    "name": "Administator",
                    "id": 1,
                    "skill": {
                      "id": 1,
                      "name": "Ruby",
                      "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png",
                      "level": {
                        "id": 3,
                        "name": "Senior",
                        "rank": 3,
                        "logo": "https://cdn3.iconfinder.com/data/icons/avatars-15/64/_Ninja-2-512.png"
                      }
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "missing params",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "name is missing",
                  "error_code": 400
                }
              }
            }
          },
          "422": {
            "description": "invalid starts time",
            "examples": {
              "application/json": {
                "error": {
                  "code": 422,
                  "message": "Validation failed: Starts on must be after ends on previous sprint"
                }
              }
            }
          },
          "401": {
            "description": "manager in other division cannot create sprint",
            "examples": {
              "application/json": {
                "error_code": 401,
                "message": "unauthorized",
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}/phases/{phase_id}/sprints/{id}": {
      "parameters": [
        {
          "name": "Authorization",
          "in": "header",
          "type": "string",
          "description": "Token authorization user"
        },
        {
          "name": "project_id",
          "in": "path",
          "type": "integer",
          "description": "Project ID",
          "required": true
        },
        {
          "name": "phase_id",
          "in": "path",
          "type": "integer",
          "description": "Phase ID",
          "required": true
        },
        {
          "name": "id",
          "in": "path",
          "type": "integer",
          "description": "Sprint ID",
          "required": true
        }
      ],
      "get": {
        "summary": "get information specific sprint",
        "tags": [
          "Sprints"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "404": {
            "description": "sprint not found",
            "examples": {
              "application/json": {
                "error": {
                  "code": 404,
                  "message": "Couldn't find Sprint with 'id'=0"
                }
              }
            }
          },
          "200": {
            "description": "return specific sprint",
            "examples": {
              "application/json": {
                "id": 1,
                "name": "sprint 1",
                "starts_on": "2018-07-19",
                "ends_on": "2018-07-20"
              }
            }
          },
          "401": {
            "description": "employee isn't in project cannot get information specific sprint",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "update sprint",
        "tags": [
          "Sprints"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Sprint's name"
                },
                "starts_on": {
                  "type": "date",
                  "description": "Starts on of sprint"
                },
                "ends_on": {
                  "type": "date",
                  "description": "Ends on of sprint"
                }
              },
              "required": [
                "name",
                "starts_on",
                "ends_on"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "manager in other division cannot update sprint",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          },
          "200": {
            "description": "PO can update sprint",
            "examples": {
              "application/json": {
                "id": 1,
                "name": "sprint 3",
                "starts_on": "2018-07-19",
                "ends_on": "2018-07-20"
              }
            }
          },
          "400": {
            "description": "empty params name",
            "examples": {
              "application/json": {
                "error": {
                  "code": 400,
                  "message": "name is empty"
                }
              }
            }
          },
          "422": {
            "description": "invalid ends on after starts on of next sprint",
            "examples": {
              "application/json": {
                "error": {
                  "code": 422,
                  "message": "Validation failed: Ends on must be after starts on next sprint"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete sprint",
        "tags": [
          "Sprints"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "description": "Sprint ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "manager of PO can delete sprint",
            "examples": {
              "appication/json": {
                "message": "Delete successfully"
              }
            }
          },
          "401": {
            "description": "manager of other division cannot delete sprint",
            "examples": {
              "application/json": {
                "error": {
                  "code": 401,
                  "message": "unauthorized"
                }
              }
            }
          }
        }
      }
    }
  }
}